Burst Ballons
/*
Method1: QujianLei DP 
create ballons array with ballon[0] = ballon[n] = 1
f[i][j] = max points for bursting ballons in i+1~j-1 interval
for loop: first k = 2~n-1 stands for interval length
left = 0~n-k-1, right = left+k,  i = left+1~right-1
update f[left][right] = Math.max(f[left][right], ballons[left]*ballons[i]*ballons[right]+f[left][i]+f[i][right]);

Method2: Divide and Conquer with Memorization
*/

Candy
/*
Method1: Forward Backward Traverse
forward i = 0~n-2, if(ratings[i+1]>ratings[i]) nums[i+1] = nums[i]+1;
backward i= n-1~1, if(ratings[i-1]>ratings[i]) nums[i-1] = Math.max(nums[i-1], nums[i]+1);

Method2: Greedy with Math -> this is hard
*/

Cherry Pickup (SuperHard)
/*
Yingfenshen DP
-> Note that greedy here can not be applied
*/

Closest Binary Search Tree Value II
/*
In order Traversal + Reverse In order Traversal + Stack
*/

Coin Path
/*
Method1: bottom-up DP(DanXulie) + Track Path 
f[i] = min cost from i to n-1(end)
next[i] = in minimal-cost and lexicographically smallest  path
          next one position(where to go one next) after i

Method2: DFS with Memorization + Track Path
*/

// 2018/2/24
//**********************************************************************************************************************
