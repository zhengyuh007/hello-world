# This include easy algorithm problems

Power of Two

    // Version1: bit manipulation
    public boolean isPowerOfTwo(int n) {
        if(n<=0) return false;
        return (n&(n-1))==0;
    }
    
    // Version2: Java API
    public boolean isPowerOfTwoV2(int n) {
        if(n<=0) return false;
        return Integer.bitCount(n)==1;
    }

    // Version3: Math -> because Integer.MAX_VALUE = pow(2, 31) -1
    public boolean isPowerOfTwoV3(int n) {
        if(n <= 0) return false;
        return (int)Math.pow(2, 30) % n == 0;
    }

Power of Three

    // Version1: Math (My Code)
    public boolean isPowerOfThree(int n) {
        if(n<=0) return false; 
        if(n==1) return true;
        while(n>1){
            if(n%3!=0) return false;
            n = n/3;
        }
        return true;
    }
    
    // Version2: Math -> O(1) solution
    public boolean isPowerOfThreeV2(int n) {
        // 1162261467 is 3^19,  3^20 is bigger than Integer.MAX_VALUE
        return (n>0 && Math.pow(3,19)%n==0);
    }
  
Power of Four

    // Version1: Math
    public boolean isPowerOfFour(int num) {
        return num>0 && ((num-1)&num) == 0 && ((num-1)%3==0);
    }
    
    // Version2: Math (My Code)
    public boolean isPowerOfFourV2(int num) {
        if(num <= 0) return false;
        // return (int)Math.pow(4, 15) % num == 0;
        // we can't do above because 4 is not a prime number
        // but we know Integer.MAX_VALUE = 2^31 - 1
        // and 2^30 = 4^15
        for(int i = 0; i <= 15; i++) {
            if(num == (int)Math.pow(4, i)) return true;
        }
        return false;
    }
    
//-----------------------------------------------------------------------------------






